---
name: ci/cd

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.12"
          - "3.13"
    name: tests (py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
          python -m pip install ".[dev]"
      - name: Test with tox
        run: |
          tox -e py

  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    needs: [tests]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
      - name: Build sdist + wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
          python -m build --sdist --wheel --outdir dist/
          python -m twine check dist/*
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: dist/

  publish:
    name: PyPI Publish ðŸš€
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          skip-existing: true

  docker-build:
    name: Docker Build+Push
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    uses: geocoug/github-actions-templates/.github/workflows/docker-build.yml@main
    permissions:
      contents: read
      packages: write
      pull-requests: write
    with:
      ghcr-enable: true
      image-names: |
        ghcr.io/${{ github.repository }}
      tag-rules: |
        type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
        type=ref,event=pr
        type=ref,event=branch
        type=semver,pattern={{version}}
        type=raw,value=gha-${{ github.run_id }}
      platforms: linux/amd64,linux/arm64

  generate-release:
    name: Generate GitHub Release
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.repository.name }}
          path: dist/
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*
